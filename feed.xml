<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">

<channel>
  <title>Brandon Rohrer</title>
  <link>https://www.brandonrohrer.com</link>
  <description>Brandon Rohrer's blog</description>
  <atom:link href="http://brandonrohrer.com/feed.xml" rel="self" type="application/rss+xml" />

  <item>
    <title>
    Interrogating an Arduino Temperature Sensor
    </title>
    <link>
    https://www.brandonrohrer.com/arduino_temp.html
    </link>
    <pubDate>
    Sun, 03 Aug 2025 07:00:00 EDT
    </pubDate>
    <description>
        <![CDATA[
        <p>
My favorite joke about sensors is a variant of
<a href="https://en.wikipedia.org/wiki/Segal's_law">Segal's law</a>.
</p>

<p>
<pre>
If you have a watch you always know what time it is.
If you have two watches, you're never sure.
</pre>
</p>

<p>
It's depressingly applicable to electromechanical systems. Once you can
read a sensor, you suddenly have ten thousand watches.
</p>

<h3><a id="Sensors-aren't-perfect"></a><a href="#Sensors-aren't-perfect">Sensors aren't perfect</a></h3>

<p>
You may not be aware of it, but when you have just one watch you tend
to have a particular mental model of how it's related to the actual time.
</p>

<p>
<figure>
  <img title="In a the simplest model of measurement, the time on the watch is the same as the actual time." alt="A diagram depicting the world time connected with an arrow to a watch
" src="https://github.com/brohrer/dotcom/blob/93167adc73f99fd2862b2731ff9cc7dd713c1315/images/arduino_temp/trivial_model.png">
  <figcaption>In a the simplest model of measurement, the time on the watch is the same as the actual time.</figcaption>
</figure>
</p>

<p>
<figure>
  <img title="In practice, the measurement and tracking of time is a little messier." alt="A diagram depicting the world time connected with an arrow to an icon
depicting measurement, a pair of old school calipers, which is connected by
two other arrows to two wristwatches
" src="https://github.com/brohrer/dotcom/blob/93167adc73f99fd2862b2731ff9cc7dd713c1315/images/arduino_temp/measurement_model.png">
  <figcaption>In practice, the measurement and tracking of time is a little messier.</figcaption>
</figure>
</p>

<p>
Measuring a thing introduces errors and imperfections. This is immediately
apparent when working with temperature. If I have one thermometer,
I can confidently report that I know what the temperature is.
</p>

<p>
<img alt="A photo of a thermometer showing the temperature
" src="images/arduino_temp/one_thermometer.jpg">
</p>

<p>
But if I have five of them, I'm no longer sure.
</p>

<p>
<img alt="A photo of five thermometers, each showing a slightly different temperature
" src="images/arduino_temp/five_thermometers.png">
</p>

<p>
Presumably all these thermometers are sitting at the same temperature,
inches apart on the same desk in the same room.
Some weirdness has been introduced in the process of measuring it though.
</p>

<p>
This introduces some troubling questions. Where is this weirdness coming from?
Can we correct for it? And more fundamentally, what even is the real temperature?
</p>

<p>
We'll spend the rest of this post trying to answer them.
</p>
        ]]>
    </description>
  </item>



  <item>
    <title>
    Getting started with Arduino
    </title>
    <link>
    https://www.brandonrohrer.com/arduino.html
    </link>
    <pubDate>
    Sat, 19 Jul 2025 22:23:21 EDT
    </pubDate>
    <description>
        <![CDATA[
<h2>Why Arduino?</h2>
        
Arduino gives builders a giftâ€”a way to bridge the gap between code and the physical world. At the heart of every Arduino board is a programmable microcontroller chip with names like ATMega2560 and ARM-Cortex-M. If you imagine a laptop, take away the screen and the keyboard, and shrink everything else down to a miniature scale, you won't be too far away from a microcontroller.

Microcontrollers come in a single integrated circuit.

<p>
  <img src="https://www.brandonrohrer.com/images/arduino/arduino_uno_r4.png">
</p>

Arduino helps out hobbyists by putting them on a larger board like this.

The Arduino board gives easy access to the tiny pins of the IC and makes it possible to plug in standard connectors for power and USB communications.

What makes the microcontroller so powerful isn't its computational capabilities (they are pretty pathetic compared to the processor in your phone). What makes it special is the large collection of input/output pins.

<ul>
<li>
Digital I/O pins which can pass high (3.3 or 5 Volts depending on the board) and low (0 Volt) signals to another circuit, as well as read high and low signals from them.
</li>
<li>
Analog input pins, which use an analog-to-digital converter to read the voltage from an outside source to a fine resolution.
</li>
<li>
Analog output (DAC) pins, which use a digital-to-analog converter to sustain a pin at any voltage from a near-continuous range.
</li>
<li>
PWM (Pulse-width modulated pins, which approximate an analog voltage by rapidly switching back and forth between high and low voltages. For example, to maintain an average voltage of 2.2 Volts, a PWM signal will switch between 0 and 3.3 Volts, spending two-thirds of its time at 3.3 V and one-third of its time at 0 V.
</li>
<li>
Specialized communication protocol pins, like UART, CAN, I2C, and SPI.
</li>
</ul>

<h3>Shields and Carriers</h3>
A microcontroller on its own is cool in concept, but isn't particularly useful. Arduino makes it easy to extend them by adding on other components. These extension boards can be stacked below (carriers) or above (shields) the Arduino boards on rows of carefully laid out pins. Shields seem to be much more common than carriers.


Shields give you a huge Swiss Army knife of tools

<ul>
<li>Ethernet</li>
<li>WiFi (although some boards come with this)</li>
<li>Extra memory</li>
<li>Relay switches</li>
<li>Motor controllers</li>
<li>Temperature other environmental sensors</li>
<li>Inertial measurement units</li>
<li>Microphone and some speech processing</li>
<li>Camera and some vision processing</li>
<li>LED and LCD displays</li>
</ul>

<h3>Models and form factors</h3>
There are a handful of different form factors with names like UNO, MKR, Portenta, Nano, and Giga. Here is a really helpful breakdown of the different boards and some of the shields and carriers that go with them. When in doubt, start with the latest UNO base and build from there. UNO is meant to be a somewhat universal starting point.

Most Arduino boards and shield are physically compatible, although this post on the Arduino forum strong encourages us to check the voltage (3.3 V vs 5 V) compatibility and the software library compatibility as well.

Because all Arduino designs are open, there are a large number of Arduino-compatible , Arduino-adjacent, and Arduino spinoff boards and shields. It can all get a little overwhelming. It's the downside of not having a single corporate overlord dictating a conveniently consumable lineup of marketing-approved SKUs. Read item descriptions and blog posts carefully, prepare for some thoughtful trial and error, and embrace the anarchy.
        ]]>
    </description>
  </item>

</channel>

</rss> 
