 <?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">

<channel>
  <title>Brandon Rohrer</title>
  <link>https://www.brandonrohrer.com</link>
  <image>
    <url>http://e2eml.school/images/transformers/architecture_multihead.png</url>
    <title>Blog</title>
    <link>https://www.brandonrohrer.com</link>
  </image>
  <description>Brandon Rohrer's blog</description>

  <item>
    <title>
    On microsuffering
    </title>
    <link>
        https://www.brandonrohrer.com/microsuffering.html
    </link>
    <description>
    I did yoga some years ago. I got stronger (which I lost) and taller (which I kept), but what that stuck with me more than either of those was the microsuffers.

The instructor didn't call them that. Instead she said something about "breathing through the discomfort" and "being present with all your sensations". In particular there is a pose called Revolved Half Moon (Parivrtta Ardha Chandrasana if you're feeling precise) which had me standing on one straight leg, bent forward with the other leg kicked out behind me, with my torso wrenched so that I could touch the ground with my opposite hand.

my body is contorted in an entirely unnatural way
I'm straining every large muscle group at once
I'm about to topple face forward
it's hard to breathe
"You're going to want to drop out of this pose really fast," she said. "But try holding it for just one breath. Now one more. You don't like it, but that's OK. Be in it for a moment."

It was a lesson in microsuffering. I learned that I don't have to rush to escape right away. I have the option of stopping for a breath, of acknowledging that a thing is happening that I don't like.

I realized I could do the same thing outside of class. There are a hundred uncomfortable moments in a day.

my sock is wrinkled and it's pinching my foot
I have an itch between my shoulder blades
my head aches from sleeping funny
my quads burn after climbing the stairs
None of these are a danger to my health. I am free to take a moment before reacting to them. I can notice the sensation. I can sit with it for a couple of breaths. And then I can fix it. I don't know why, but breaking the chain of instant reaction and inserting a link engraved with "notice it" gives me a sense of power and peace. I'm are no longer a puppet, controlled by whatever small discomfort decides to pull my strings.

This felt good, so I started looking for other ways to embrace microsuffers. There are plenty.

the seat on the bus makes me sit in an awkward position
the sun is in the direction I'm headed and it's shining too brightly
it's only 2:30 pm and I'm feeling sleepy
the tote bag I'm carrying is too heavy
Even when discomfort doesn't cross over into the physical pain, it's still a chance to pause before reacting. Of course, I'm not going to spend a whole bus ride sitting awkwardly if I can avoid it, but pausing before shifting my pose is a way to assert my power over it. I'm reacting because I choose to, not because I must.

You can also find microsuffers that don't touch your body. There are things about my surroundings that I reflexively move to change.

there is a dirty dish on the counter
the books on my shelf are not lined up
a thumbscrew is loose in the finish trim
the milk from my cereal splashed onto my laptop screen
These things irritate me like a paper cut. Of course I want to set them right. But I also have the option to do a microsuffer. I can notice the irritation. Sit with it for a couple of breaths. Then do something about it. Or not. For some weird reason, that completely changes the experience for me.

There are also plenty of microsuffers avaialable in the stuff that we have.

my car got hit by a pebble and is missing a chip of paint on the hood
the stairs in my house creak
my monitor won't show the high resolution promised on the box
my pants have a hole in the knee after three weeks
One option is to launch into repair mode when things like this happen. Another option is pause first. Feel the full weight of the disappointment. Then feel guilty about feeling so much disappointment for something so superficial. And notice that guilt too. Let it all flow through you and even fill you up. I find that it's hard to hold onto. Saying out loud that I'm sad about the hole in my pants robs it of its intensity. I'm still sad about it, but it doesn't have the same grip on me.

Suffering is personal. What causes me small discomfort can cause another debilitating pain, and you might not notice it at all. For some, the possibility that they offended someone is grimace inducing, but for others it is all consuming. And there are others still that would never think twice about it. Or imagine a scratchy clothing tag. It is a mild irritant for one person, completely unnoticeable to another, and a fate worse than death for a third. The things that cause us microsuffers are as unique as a fingerprint. Brains work very differently.

(Personal note: I hesitated before publishing this post because the examples I give say a lot about what makes me tick. I had to think about whether I wanted to share this much detail. They're not all taken from my experience, but a lot of them are.)
    </description>
  </item>

  <item>
    <title>
    Lessons learned from the End to End Machine Learning School
    </title>
    <link>
        https://www.brandonrohrer.com/e2eml_lessons.html
    </link>
    <description>
    Six years ago I started putting machine learning courses online in what I called the End to End Machine Learning School (e2eML). I hoped that eventually I would build a curriculum and a student body large enough to be self sustaining and allow me to teach full time. As of March 1, 2025 I'll be closing it down. Here are some things I learned along the way.

Money comes from students
It's obvious in retrospect, but in a school like mine, every dollar that went into my pocket came out of a student's pocket. In order to make enough to rely on teaching as a primary source of income, I either had to charge a few students a lot of money, or lots of students a little money. These approaches represent two different business plans: one where I focus on a small group of high-paying students and one where I recruit as many students as possible who can pay a small fee.

People don't like giving away their money
I was active on LinkedIn and Twitter and sent email newsletters. I posted regularly and engaged with commenters. I answered follow up questions and was responsive to requests. I had tens of millions of impressions on posts advertising my courses. Over 16,000 students committed to the school enough to sign up with an email address for some of the free content. Maybe 2% of those signed up for paid courses. Sales and marketing is hard work and I have a lot of respect for the people who are good at it.

I'm don't like telling people to give me their money
Some of the most popular ways of persuading people to part with their money are by frightening them or by promising them something you can't give them. I was uncomfortable with both of these, even in small doses. I wish I could have told prospective students that my courses would have gotten them high paying jobs, but that would have been an exaggeration. I wish I could have told them they'd be left behind if they didn't sign up today, but that would have been a lie. So I told them that the course content was fascinating and accessible, and might be useful. Not exactly a hard sell, but I realized that's the salesman I am.

I enjoy helping people get a foothold
When confronting a new topic or a new field, there's a thing that happens sometimes where you are excited about it, but you don't know where to start. That's a critical point. It's like starting to climb a mountain, but being confronted by a blank face of rock. There are a few people who will relentlessly hammer at it until they make their own way up, but there is a much larger group who just need some pointers on the first few steps--here's a less steep section; here's an edge to hold onto--and then they can take it from there. I love being able to point out those first few moves.

This became the pattern for the content I created. After getting comfortable with a topic, I would write to introduction and tutorial that I wish I had when I started. What would past me most want to know?

This decision meant that examples and concepts were often simplified, sometimes leaving out important details at first. Sometimes they weren't entirely correct, but gave a useful mental model for getting started. They definitely didn't showcase elegant mathematical formalisms and famous-name histories. It's not the only way to teach or even the best one, but it's one I chose.

I enjoyed reaching people who might not have many options
In order to make the courses financially accessible, I chose a low-tuition/ many student business model. This decision meant that I would not be able to give students much individual attention or mentoring or feedback. It made the nature of the courses more one-way and asynchronous. It certainly isn't the most effective way to teach. There is no substitute for one-on-one, interactive teaching. But it was the way I could reach the largest number people.

Ultimately it was also the reason I made the courses free. I realized that even a US$9 cost was prohibitive for many of the people I was trying to reach. I experimented with discounts and promotions and scholarships, but at the end I realized that I had two incompatible goals--1) get money from students and 2) reach students without money--so I let go of the former and doubled down on the latter.

I enjoyed lecturing more than fielding questions
I realized that I'm not actually cut out to be a great teacher. I like to write prose and code and presentations and videos, but I struggled when it came to debugging technical issues or answering students' very thoughtful questions about the content. The asynchronous nature of the content meant that I was already focused on the next course. Sometimes the questions were about something I published two years ago, and I had to do some industrial grade dredging to remember what I was thinking then.

I enjoyed curiosity-driven projects more than topic coverage
In a curriculum, there is an expectation that topics will be covered somewhat exhaustively. An arithmetic curriculum that only covers subtraction and division would be weird. Machine learning is a broad topic, but there is an expectation that a ML curriculum will cover at least the most popular algorithms, and especially whatever is hot at the moment. (In 2019 that was neural networks.)

However, I found that some of my most satifying work was in exploring deserted corners or experimenting with new methods. Rather than encyclopedic coverage of common regularization methods, what about trying out some new ones? What if we changed convolutional neural networks so that they use sharpened cosine similarity instead of convolution? Can we improve on existing discrete optimization methods for hyperparameter optimization?

Several times I lost steam on a course only to realize after some introspection that I just wasn't interested in that topic at the moment. I was forcing it. Forcing it and powering through the boredom is a normal part of life if someone is paying you to do a job. But after I stopped charging for my courses I realized that I was free to pursue whatver caught my fancy. So I did.

Writing is an indispensible part of my learning process
Even when I started teaching on a topic I thought I understood or code I felt comfortable with, the writing step transformed it. As I explained the topic in writing I would write a sentence, then stop and second guess whether it was right. This led to a double-checking rabbit hole which, more often than not, would cast a whole new light on the thing I was trying to say. And sometimes I would discover I was flat wrong. But the explaining through writing sent deep taproots down in my comprehension. I might still be wrong, but at least I was wrong on a more profound level.

Writing about code exposed bugs for me. Every time. Some of them were pretty embarassing.

When approaching a subject I didn't know much about, like transformers, writing helped my sort through the hail of factoids and half-formed concepts. Even though I could only hold one pebble of knowledge in my head at once, writing gave me a beach where I could arrange them into a bigger mosaic.

Writing has become inseparable from my learning process. This leads to and unruly set of posts. I've resigned myself to the fact that my blog will be somewhat chaotic, although I've tried to impose a veneer or organization.

Thank you
If you were part of e2eML, I am grateful to you. Thank you for trusting me with a bit of your time and attention and hard-earned money. I appreciated having you there.

Brandon
December 30, 2024
    </description>
  </item>

  <item>
    <title>
    Write an HTTP client in Python
    </title>
    <link>
        https://www.brandonrohrer.com/http_client.html
    </link>
    <description>
    Why bother with HTTP?
There are a lot of reasons you might want to get two computers talking to each other, and HTTP is a good way to make this happen. It's used to share web pages of course (the name "hypertext transfer protocol" describes this use case directly) but it can be used to share all kinds of other data too—all varieties of text, image, audio, and video formats. Just imagine all the shenanigans you can orchestrate with this power.

In the world of computer networking getting computers talking the same language (a.k.a. protocol) is the first step. Some protocols are very niche, intended for tasks like reading oxygen sensors in combustion engines or controlling the environment in office buildings. In contrast, HTTP is a general purpose networking protocol. It pays the price of longer messages and a more complex standard in order to fill lots of different needs. It's a Swiss Army knife rather than a scalpel. It is said that Python is the second-best programming language for every task. The same could be said about HTTP for networking.

This post is an attempt to give some guide posts through the terrain, but the world of HTTP is wide and has a lot of history and hidden corners. Everything written here is oversimplified, and some of it is probably wrong, but I hope you find it useful.
    </description>
  </item>

  <item>
    <title>
    Writing an HTTP server in Python
    </title>
    <link>
        https://www.brandonrohrer.com/http_server.html
    </link>
    <description>
    This is the sequel to a post walking through an HTTP client in Python. The client in that post sent a request to a server that performs addition. This post walks through the code for that server

Server terminology can be confusing. "Server" can refer to both the program that listens for HTTP messages and the metal and ceramic box sitting in a rack in a data center where that program runs. In this post, we are focusing on the first of those.
    </description>
  </item>

  <item>
    <title>
    What is a server, anyway?
    </title>
    <link>
        https://www.brandonrohrer.com/server_naming.html
    </link>
    <description>
It's true that naming things is one of the two (or three) hardest problems in computer science, but with "server" they seemed to have gone out of their way to make it worse. Here's my attempt to clear the fog.

SERVER: A process that waits and takes requests, like a server at a restaurant. Or perhaps more like an old-time rich people banquet where servers literally sat waiting nearby, ready to jump in and respond.

REQUEST HANDLER (also called SERVER sometimes): A separate function, thread, or process that gets called to handle to request received by the server. In the restaurant example, the cooks in the kitchen are request handlers.

CLIENT-SERVER MODEL (also CLIENT-SERVER ARCHITECTURE): The setup where one process (the client) sends requests to another (the server), which fulfills the request and sends a response back to the client. When you sit down at a table in a restaurant and place your order, you are the client in a client-server model.

SERVER HOST (often called SERVER, for short): The computer where the server process runs. It can sit in your broom closet, under your desk, or in a data center in Virginia. In the restaurant metaphor the server host is the restaurant itself.

SERVERLESS ARCHITECTURE: Contrary to its name, serverless architectures involve plenty of servers and server host, but they are all hidden behind tools and teams that manage them. To stretch the restaurant analogy even further, a serverless architecture would be like placing a catering order for a thousand sandwiches through a form, which is then picked up by a catering supervisor who places several smaller orders with individual restaurants for a few dozen sandwiches each. The servers still exist, the server handlers still exist, the server hosts still exist, you just don't have to worry about any of them (in theory).

PROTOCOL: The format of the communication used to place requests and interpret responses from the server. In a restaurant, protocol includes whether you order at the counter or the table, whether you pay at the beginning or the end of the meal, and what language you speak to order. There are a handful of common protocols, including HTTP (hypertext transfer protocol) for web servers, FTP (file transfer protocol) for file servers, and SMTP (Simple Mail Transfer Protocol) for mail servers, and many others used for very specific functions or systems.
    </description>
  </item>


</channel>

</rss> 
