 <?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">

<channel>
  <title>Brandon Rohrer</title>
  <link>https://www.brandonrohrer.com</link>
  <image>
    <url>http://e2eml.school/images/transformers/architecture_multihead.png</url>
    <title>Blog</title>
    <link>https://www.brandonrohrer.com</link>
  </image>
  <description>Brandon Rohrer's blog, articles, and books</description>

  <item>
    <title>
        dsmq, the Dead Simple Message Queue
    </title>
    <link>
        https://brandonrohrer.com/dsmq.html
    </link>
    <description>
I'd like to introduce dsmq, the Dead Simple Message Queue, to the world.

Part mail room, part bulletin board, dsmq is a central location for sharing messages between processes, even when they are running on different computers.

Its defining characteristic is bare-bones simplicity.

What dsmq does

A message queue lets different processes talk to each other, within or across machines. Message queues are a waystation, a place to publish messages and hold them until they get picked up by the process that needs them.

In dsmq, a program running the message queue starts up first (the server). It handles all the receiving, delivering, sorting, and storing of messages.

Other programs (the clients) connect to the server. They add messages to a queue or read messages from a queue. Each queue is a separate topic.

Why message queues?
Message queues are invaluable for distributed systems of all sorts, but my favorite application is robotics. Robots typically have several (or many) processes doing different things at different speeds. Communication between processes is a fundamental part of any moderately complex automated system. When ROS (the Robot Operating System) was released, one of the big gifts it gave to robot builders was a reliable way to pass messages.

Why another message queue?
There are lots of message queues in the world, and some are quite well knownâ€”Amazon SQS, RabbitMQ, Apache Kafka to name a few. It's fair to ask why this one was created.

The official reason for dsmq's existence is that all the other available options are pretty heavy. Take RabbitMQ for instance, a popular open source message queue. It has hundreds of associated repositories and it's core rabbitmq-server repo has many thousands of lines of code. It's a heavy lift to import this to support a small robotics project, and code running on small edge devices may struggle to run it at all.

RabbitMQ is also mature and optimized and dockerized and multi-platform and fully featured and a lot of other things a robot doesn't need. It would be out of balance to use it for a small project.

dsmq is only about 200 lines of Python, including client and server code. It's tiny. Good for reading and understanding front-to-back when you're integrating it with your project.

But the real reason is that I wanted to understand how a message queue might work and the best way I know to learn this is to build one.
    </description>
  </item>


</channel>

</rss> 
