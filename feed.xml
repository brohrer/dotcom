 <?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">

<channel>
  <title>Brandon Rohrer</title>
  <link>https://www.brandonrohrer.com</link>
  <image>
    <url>http://e2eml.school/images/transformers/architecture_multihead.png</url>
    <title>Blog</title>
    <link>https://www.brandonrohrer.com</link>
  </image>
  <description>Brandon Rohrer's blog, articles, and books</description>

  <item>
    <title>
    What is a server, anyway?
    </title>
    <link>
        https://www.brandonrohrer.com/server_naming.html
    </link>
    <description>
It's true that naming things is one of the two (or three) hardest problems in computer science, but with "server" they seemed to have gone out of their way to make it worse. Here's my attempt to clear the fog.

SERVER: A process that waits and takes requests, like a server at a restaurant. Or perhaps more like an old-time rich people banquet where servers literally sat waiting nearby, ready to jump in and respond.

REQUEST HANDLER (also called SERVER sometimes): A separate function, thread, or process that gets called to handle to request received by the server. In the restaurant example, the cooks in the kitchen are request handlers.

CLIENT-SERVER MODEL (also CLIENT-SERVER ARCHITECTURE): The setup where one process (the client) sends requests to another (the server), which fulfills the request and sends a response back to the client. When you sit down at a table in a restaurant and place your order, you are the client in a client-server model.

SERVER HOST (often called SERVER, for short): The computer where the server process runs. It can sit in your broom closet, under your desk, or in a data center in Virginia. In the restaurant metaphor the server host is the restaurant itself.

SERVERLESS ARCHITECTURE: Contrary to its name, serverless architectures involve plenty of servers and server host, but they are all hidden behind tools and teams that manage them. To stretch the restaurant analogy even further, a serverless architecture would be like placing a catering order for a thousand sandwiches through a form, which is then picked up by a catering supervisor who places several smaller orders with individual restaurants for a few dozen sandwiches each. The servers still exist, the server handlers still exist, the server hosts still exist, you just don't have to worry about any of them (in theory).

PROTOCOL: The format of the communication used to place requests and interpret responses from the server. In a restaurant, protocol includes whether you order at the counter or the table, whether you pay at the beginning or the end of the meal, and what language you speak to order. There are a handful of common protocols, including HTTP (hypertext transfer protocol) for web servers, FTP (file transfer protocol) for file servers, and SMTP (Simple Mail Transfer Protocol) for mail servers, and many others used for very specific functions or systems.
    </description>
  </item>


</channel>

</rss> 
