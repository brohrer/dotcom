 <?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">

<channel>
  <title>Brandon Rohrer</title>
  <link>https://www.brandonrohrer.com</link>
  <image>
    <url>http://e2eml.school/images/transformers/architecture_multihead.png</url>
    <title>Blog</title>
    <link>https://www.e2eml.school</link>
  </image>
  <description>Brandon Rohrer's blog, articles, and books</description>

  <item>
    <title>From csv to database with Python</title>
    <link> https://e2eml.school/db_penguins.html </link>
    <description> Databases are the new Dataframes

Not really, but join me in a thought experiment.

Imagine you wanted to do some data analysis, but also wanted to avoid importing any external libraries into Python. This is not just an academic exercise. A large part of the challenge of working in Python is managing dependencies, environments, and breaking updates. Sticking with base Python and the libraries it ships with would make your code considerably more robust and lower maintenance.

We can do exactly this with SQLite3. To demonstrate how we would ingest a csv to a Dataframe will use the most excellent Palmer Penguins Data Set.
</description>
  </item>

  <item>
    <title>A Pythonista's First Database</title>
    <link>https://e2eml.school/db_first_db.html </link>
    <description> It's a familiar story. Your friends all brag about their humongous databases. They go on and on about MySQL this and Redis that, and "oh can you believe they swapped out Mongo for Snowflake!?!" and they all laugh and you pretend to laugh along. But inside you're sad because you don't have a database. Well today is your lucky day. Today you get a database of your very own.

One of the sleekest and slickest databases out there is SQLite. It's so lean that it got folded right into standard Python as the sqlite3 library. It's the single most used database in the world, and its code is entirely open source, in the public domain.

If you're already working in Python, you have SQLite installed. </description>
  </item>

  <item>
    <title>Navigating Database Awkwardness: The First Date</title>
    <link>https://e2eml.school/db_awkwardness.html </link>
    <description> One of the things that can make databases awkward at first, especially in Python, is the terminology. Itâ€™s based on some old school concepts and technologies. A very long time ago bits were carved into stone tablets with magnetic chisels. These tablets were circular in shape and stacked on top of each other, resulting in something shaped like a can, or a drum. And this is why databases are always represented as cylinders in architecture diagrams.</description>
  </item>

  <item>
    <title>How to Train Your Robot has a Table of Contents</title>
    <link>https://tyr.fyi</link>
    <enclosure url="https://www.brandonrohrer.com/feed/tyr_toc.png" length="107110" type="image/png" />
    <description>The book project now has enough content to merit a table of contents.</description>
  </item>

  <item>
    <title>Making Your Python Code Run Faster: How to Train Your Robot, Chapter 6</title>
    <link>https://tyr.fyi/6</link>
    <enclosure url="https://www.brandonrohrer.com/feed/numba_ten.png" length="89931" type="image/png" />
    <description>Chapter six is all about getting code to do what you want faster. It's hard keeping up with the wall clock. Luckily profilers, vectorization, and Numba are there for us.</description>
  </item>

  <item>
    <title>Simulating the Physical World: How to Train Your Robot, Chapter 5</title>
    <link>https://tyr.fyi/5</link>
    <enclosure url="https://www.brandonrohrer.com/feed/tetris.png" length="50606" type="image/png" />
    <description>In chapter five we take a detailed look at turning the physics of rigid bodies into fast Python code.</description>
  </item>

  <item>
    <title>Making Animations with Matplotlib: How to Train Your Robot, Chapter 4</title>
    <link>https://tyr.fyi/4</link>
    <enclosure url="https://www.brandonrohrer.com/feed/spaceship.png" length="68666" type="image/png" />
    <description>Chapter four is all about how to make moving pictures.  It's entertaining, yes, but it's also a very good way to represent complex data that changes over time. It also happens to be a great companion to games and simulations, which is exactly how we'll be using it a few chapters later.</description>
  </item>

  <item>
    <title>Getting Processes to Talk to Each Other: How to Train Your Robot, Chapter 3</title>
    <link>https://tyr.fyi/3</link>
    <enclosure url="https://www.brandonrohrer.com/feed/queue.png" length="54305" type="image/png" />
    <description>In this chapter we get to build an adding machine. It is exactly as fascinating as it sounds.</description>
  </item>

  <item>
    <title>Keeping Time with Python: How to Train Your Robot, Chapter 2</title>
    <link>https://tyr.fyi/2</link>
    <enclosure url="https://www.brandonrohrer.com/feed/sleep.png" length="367523" type="image/png" />
    <description>The second installment in a quest to build a robot as smart as my pup.</description>
  </item>

  <item>
    <title>How to Train Your Robot, Chapter 1</title>
    <link>https://tyr.fyi/1</link>
    <enclosure url="https://www.brandonrohrer.com/feed/ducks.png" length="725898" type="image/png" />
    <description>The first chapter of a book that builds a solution to the Human Directed Reinforcement Learning (HDRL) problem, more commonly known as teaching a dog to sit.  It's titled Can't Artificial Intelligence Already Do That</description>
  </item>

  <item>
    <title>Transformers From Scratch</title>
    <link>https://e2eml.school/transformers</link>
    <enclosure url="https://e2eml.school/images/transformers/architecture_multihead.png" length="108278" type="image/png" />
    <description>A step-by-step walkthrough of transformers,
      the algorithm behind Large Language Models like ChatGPT.</description>
  </item>

  <item>
    <title>Homepage</title>
    <link>https://e2eml.school</link>
    <description>A list of what I've written.</description>
  </item>

</channel>

</rss> 
